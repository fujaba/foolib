

roleAttrDecl(roleName,roleType,toMany,otherClassName) ::=
<<
<if(toMany)>
   private SimpleListProperty\< <otherClassName> > <roleName> = _init<cap(roleName)>();
<else>
   private ObjectProperty\< <otherClassName> > <roleName> = _init<cap(roleName)>();
<endif>
>>

propertyDecl(roleName) ::=
<<   public static final String PROPERTY_<roleName> = "<roleName>";>>

initMethod(roleName,toMany,myClassName,otherClassName,otherRoleName,otherToMany) ::=
<<
<if(toMany)>
   private SimpleListProperty\< <otherClassName> > _init<cap(roleName)>()
   {
      SimpleListProperty\< <otherClassName> > result = new SimpleListProperty(javafx.collections.FXCollections.observableArrayList());
      result.addListener((javafx.collections.ListChangeListener\<? super <otherClassName> >) change -> {
         while (change.next())
         {
            java.util.List\<? extends <otherClassName> > removed = change.getRemoved();
            for (<otherClassName>  value : removed)
            {
               value.<withoutThis(otherToMany,otherRoleName)>;
               firePropertyChange("<roleName>", value, null);
            }
            for (<otherClassName> value : change.getAddedSubList())
            {
               value.<prefix(otherToMany)><cap(otherRoleName)>(this);
               firePropertyChange("<roleName>", null, value);
            }
         }
      });
      return result;
   }
<else>
   private ObjectProperty\< <otherClassName> > _init<cap(roleName)>()
   {
      ObjectProperty\< <otherClassName> > result = new SimpleObjectProperty\<>();
      result.addListener((observable, oldValue, newValue) ->
      {
         if (oldValue != null) oldValue.<withoutTypeThis(otherToMany,otherRoleName,myClassName)>;
         if (newValue != null) newValue.<prefix(otherToMany)><cap(otherRoleName)>(<myClassName>.this);
         firePropertyChange("<roleName>", oldValue, newValue);
      });
      return result;
   }
<endif>
>>


getMethod(roleName,toMany,otherClassName,roleType) ::=
<<
<if(toMany)>
   public <property(toMany)>\< <otherClassName> > get<cap(roleName)>()
   {
      return <roleName>;
   }
<else>
   public <otherClassName> get<cap(roleName)>()
   {
      return <roleName>.getValue();
   }
<endif>
>>


propertyMethod(roleName,otherClassName) ::=
<<
   public ObjectProperty\< <otherClassName> > <roleName>Property()
   {
      return <roleName>;
   }
>>


property(toMany) ::=
<%
<if(toMany)>
SimpleListProperty
<else>
ObjectProperty
<endif>
%>


setMethod(roleName,toMany,myClassName,otherClassName,otherRoleName,otherToMany,roleType) ::=
<<
<if(toMany)>
   public <myClassName> with<cap(roleName)>(<otherClassName> value)
   {
      if (this.get<cap(roleName)>().contains(value)) return this;
      this.get<cap(roleName)>().add(value);
      return this;
   }
<else>
   public <myClassName> set<cap(roleName)>(<otherClassName> value)
   {
      if (value == this.<roleName>.getValue()) return this;
      <roleName>.setValue(value);
      return this;
   }
<endif>
>>


withoutMethod(roleName,toMany,myClassName,otherClassName,otherRoleName,otherToMany,roleType) ::=
<<
   public <myClassName> without<cap(roleName)>(<otherClassName> value)
   {
      this.get<cap(roleName)>().remove(value);
      return this;
   }
>>


withoutTypeThis(toMany,otherRoleName,myClassName) ::=
<%
<if(toMany)>
   without<cap(otherRoleName)>(<myClassName>.this)
<else>
   set<cap(otherRoleName)>(null)
<endif>
%>


withoutThis(toMany,otherRoleName) ::=
<%
<if(toMany)>
   without<cap(otherRoleName)>(this)
<else>
   set<cap(otherRoleName)>(null)
<endif>
%>


prefix(toMany) ::=
<%
<if(toMany)>
   with
<else>
   set
<endif>
%>

cap(n) ::=
<%
<n; format="cap">
%>

