roleAttrDecl(roleName, roleType, toMany, otherClassName) ::= <<
<if(toMany)>
   private SimpleListProperty\< <otherClassName> > <roleName> = _init<roleName; format="cap">();
<else>
   private ObjectProperty\< <otherClassName> > <roleName> = _init<roleName; format="cap">();
<endif>
>>

initMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany) ::= <<
<if(toMany)>
   private SimpleListProperty\< <otherClassName> > _init<roleName; format="cap">()
   {
      SimpleListProperty\< <otherClassName> > result = new SimpleListProperty(javafx.collections.FXCollections.observableArrayList());
      result.addListener((javafx.collections.ListChangeListener\<? super <otherClassName> >) change -> {
         while (change.next())
         {
            java.util.List\<? extends <otherClassName> > removed = change.getRemoved();
            for (<otherClassName>  value : removed)
            {
               value.<withoutThis(otherToMany,otherRoleName)>;
               firePropertyChange("<roleName>", value, null);
            }
            for (<otherClassName> value : change.getAddedSubList())
            {
               value.<prefix(otherToMany)><otherRoleName; format="cap">(this);
               firePropertyChange("<roleName>", null, value);
            }
         }
      });
      return result;
   }
<else>
   private ObjectProperty\< <otherClassName> > _init<roleName; format="cap">()
   {
      ObjectProperty\< <otherClassName> > result = new SimpleObjectProperty\<>();
      result.addListener((observable, oldValue, newValue) ->
      {
         if (oldValue != null) oldValue.<withoutTypeThis(otherToMany,otherRoleName,myClassName)>;
         if (newValue != null) newValue.<prefix(otherToMany)><otherRoleName; format="cap">(<myClassName>.this);
         firePropertyChange("<roleName>", oldValue, newValue);
      });
      return result;
   }
<endif>
>>

getMethod(roleName, toMany, otherClassName, roleType) ::= <<
<if(toMany)>
   public SimpleListProperty\< <otherClassName> > get<roleName; format="cap">()
   {
      return <roleName>;
   }
<else>
   public <otherClassName> get<roleName; format="cap">()
   {
      return <roleName>.getValue();
   }
<endif>
>>

propertyMethod(roleName, otherClassName) ::= <<
   public ObjectProperty\< <otherClassName> > <roleName>Property()
   {
      return <roleName>;
   }
>>

setMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany, roleType) ::= <<
<if(toMany)>
   public <myClassName> with<roleName; format="cap">(<otherClassName> value)
   {
      if (this.get<roleName; format="cap">().contains(value)) return this;
      this.get<roleName; format="cap">().add(value);
      return this;
   }
<else>
   public <myClassName> set<roleName; format="cap">(<otherClassName> value)
   {
      if (value == this.<roleName>.getValue()) return this;
      <roleName>.setValue(value);
      return this;
   }
<endif>
>>

withoutMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany, roleType) ::= <<
   public <myClassName> without<roleName; format="cap">(<otherClassName> value)
   {
      this.get<roleName; format="cap">().remove(value);
      return this;
   }
>>

withoutTypeThis(toMany, otherRoleName, myClassName) ::= <%
<if(toMany)>
   without<otherRoleName; format="cap">(<myClassName>.this)
<else>
   set<otherRoleName; format="cap">(null)
<endif>
%>

withoutThis(toMany, otherRoleName) ::= <%
<if(toMany)>
   without<cap(otherRoleName)>(this)
<else>
   set<cap(otherRoleName)>(null)
<endif>
%>

prefix(toMany) ::= <%
<if(toMany)>
   with
<else>
   set
<endif>
%>
