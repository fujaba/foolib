// --------------- Overrides ---------------

roleAttrDecl(roleName, roleType, toMany, otherClassName) ::= <<
<if(toMany)>
   private SimpleListProperty\<<otherClassName>\> <roleName> = _init<roleName; format="cap">();
<else>
   private ObjectProperty\<<otherClassName>\> <roleName> = _init<roleName; format="cap">();
<endif>
>>

getMethod(roleName, toMany, otherClassName, roleType) ::= <<
<if(toMany)>
   public SimpleListProperty\<<otherClassName>\> get<roleName; format="cap">()
   {
      return this.<roleName>;
   }
<else>
   public <otherClassName> get<roleName; format="cap">()
   {
      return this.<roleName>.getValue();
   }
<endif>
>>

setMethod(myClassName, roleName, otherClassName, otherRoleName, otherToMany) ::= <<
   public <myClassName> set<roleName; format="cap">(<otherClassName> value)
   {
      if (value != this.<roleName>.getValue())
      {
         this.<roleName>.setValue(value);
      }
      return this;
   }
>>

withItem(myClassName, roleName, otherClassName, otherRoleName, otherToMany, roleType) ::= <<
   public <myClassName> with<roleName; format="cap">(<otherClassName> value)
   {
      if (!this.<roleName>.contains(value))
      {
         this.<roleName>.add(value);
      }
      return this;
   }
>>

withoutItem(myClassName, roleName, otherClassName, otherRoleName, otherToMany) ::= <<
   public <myClassName> without<roleName; format="cap">(<otherClassName> value)
   {
      this.<roleName>.remove(value);
      return this;
   }
>>

// --------------- Additional Templates ---------------

propertyMethod(roleName, otherClassName) ::= <<
   public ObjectProperty\<<otherClassName>\> <roleName>Property()
   {
      return this.<roleName>;
   }
>>

initMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany) ::= <<
<if(toMany)>
   private SimpleListProperty\<<otherClassName>\> _init<roleName; format="cap">()
   {
      final SimpleListProperty\<<otherClassName>\> result = new SimpleListProperty(javafx.collections.FXCollections.observableArrayList());
      result.addListener((javafx.collections.ListChangeListener\<? super <otherClassName>\>) change -> {
         while (change.next())
         {
            for (final <otherClassName> value : change.getRemoved())
            {
               value.<withoutThis(otherToMany, otherRoleName)>;
               this.firePropertyChange("<roleName>", value, null);
            }
            for (final <otherClassName> value : change.getAddedSubList())
            {
               value.<prefix(otherToMany)><otherRoleName; format="cap">(this);
               this.firePropertyChange("<roleName>", null, value);
            }
         }
      });
      return result;
   }
<else>
   private ObjectProperty\<<otherClassName>\> _init<roleName; format="cap">()
   {
      final ObjectProperty\<<otherClassName>\> result = new SimpleObjectProperty\<>();
      result.addListener((observable, oldValue, newValue) -> {
         if (oldValue != null)
         {
            oldValue.<withoutThis(otherToMany, otherRoleName)>;
         }
         if (newValue != null)
         {
            newValue.<prefix(otherToMany)><otherRoleName; format="cap">(<myClassName>.this);
         }
         this.firePropertyChange("<roleName>", oldValue, newValue);
      });
      return result;
   }
<endif>
>>
