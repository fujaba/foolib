// --------------- Overrides ---------------

roleAttrDecl(role, other) ::= <<
<if(role.toMany)>
   private SimpleListProperty\<<other.clazz.name>\> <role.name> = _init<role.name; format="cap">();
<else>
   private ObjectProperty\<<other.clazz.name>\> <role.name> = _init<role.name; format="cap">();
<endif>
>>

getMethod(role, other) ::= <<
<if(role.toMany)>
   public SimpleListProperty\<<other.clazz.name>\> get<role.name; format="cap">()
   {
      return this.<role.name>;
   }
<else>
   public <other.clazz.name> get<role.name; format="cap">()
   {
      return this.<role.name>.getValue();
   }
<endif>
>>

setMethod(role, other) ::= <<
   public <role.clazz.name> set<role.name; format="cap">(<other.clazz.name> value)
   {
      if (value != this.<role.name>.getValue())
      {
         this.<role.name>.setValue(value);
      }
      return this;
   }
>>

withItem(role, other) ::= <<
   public <role.clazz.name> with<role.name; format="cap">(<other.clazz.name> value)
   {
      if (!this.<role.name>.contains(value))
      {
         this.<role.name>.add(value);
      }
      return this;
   }
>>

withoutItem(role, other) ::= <<
   public <role.clazz.name> without<role.name; format="cap">(<other.clazz.name> value)
   {
      this.<role.name>.remove(value);
      return this;
   }
>>

// --------------- Additional Templates ---------------

propertyMethod(role, other) ::= <<
   public ObjectProperty\<<other.clazz.name>\> <role.name>Property()
   {
      return this.<role.name>;
   }
>>

initMethod(role, other) ::= <<
<if(role.toMany)>
   private SimpleListProperty\<<other.clazz.name>\> _init<role.name; format="cap">()
   {
      final SimpleListProperty\<<other.clazz.name>\> result = new SimpleListProperty(javafx.collections.FXCollections.observableArrayList());
      result.addListener((javafx.collections.ListChangeListener\<? super <other.clazz.name>\>) change -> {
         while (change.next())
         {
            for (final <other.clazz.name> value : change.getRemoved())
            {
               value.<withoutThis(other)>;
               this.firePropertyChange("<role.name>", value, null);
            }
            for (final <other.clazz.name> value : change.getAddedSubList())
            {
               value.<withThis(other)>;
               this.firePropertyChange("<role.name>", null, value);
            }
         }
      });
      return result;
   }
<else>
   private ObjectProperty\<<other.clazz.name>\> _init<role.name; format="cap">()
   {
      final ObjectProperty\<<other.clazz.name>\> result = new SimpleObjectProperty\<>();
      result.addListener((observable, oldValue, newValue) -> {
         if (oldValue != null)
         {
            oldValue.<withoutThis(other)>;
         }
         if (newValue != null)
         {
            newValue.<withThis(other)>;
         }
         this.firePropertyChange("<role.name>", oldValue, newValue);
      });
      return result;
   }
<endif>
>>
