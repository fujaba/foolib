collectionImpl(attr) ::= <%
<attr.boxType; format={<attr.collectionType.implTemplate>}>
%>

collectionItf(attr) ::= <%
<attr.collectionType.itf.qualifiedName>\<<attr.boxType>>
%>

// --------------- Declarations ---------------

attrDecl(attr) ::= <<
<if(attr.collection)>
   private <collectionItf(attr)> <attr.name><if(attr.initialization)> = <attr.initialization><endif>;
<else>
   private <attr.type> <attr.name><if(attr.initialization)> = <attr.initialization><endif>;
<endif>
>>

propertyDecl(attr) ::= <<
   public static final String PROPERTY_<attr.name> = "<attr.name>";
>>

// --------------- Simple Accessors ---------------

attrGet(attr) ::= <<
<if(attr.collection)>
   public <collectionItf(attr)> get<attr.name; format="cap">()
   {
      return this.<attr.name> != null ? Collections.unmodifiable<attr.collectionType.itf.simpleName>(this.<attr.name>) : Collections.empty<attr.collectionType.itf.simpleName>();
   }
<else>
   public <attr.type> get<attr.name; format="cap">()
   {
      return this.<attr.name>;
   }
<endif>
>>

attrSet(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(<attr.type> value)
   {
      this.<attr.name> = value;
      return this;
   }
>>

// --------------- With ---------------

attrWithItem(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(<attr.boxType> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>();
      }
      this.<attr.name>.add(value);
      return this;
   }
>>

attrWithArray(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(<attr.boxType>... value)
   {
      this.with<attr.name; format="cap">(Arrays.asList(value));
      return this;
   }
>>

attrWithColl(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(Collection\<? extends <attr.boxType>\> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>(value);
      }
      else
      {
         this.<attr.name>.addAll(value);
      }
      return this;
   }
>>

// --------------- Without ---------------

attrWithoutItem(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(<attr.boxType> value)
   {
      this.<attr.name>.removeAll(Collections.singleton(value));
      return this;
   }
>>

attrWithoutArray(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(<attr.boxType>... value)
   {
      this.without<attr.name; format="cap">(Arrays.asList(value));
      return this;
   }
>>

attrWithoutColl(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(Collection\<? extends <attr.boxType>\> value)
   {
      if (this.<attr.name> != null)
      {
         this.<attr.name>.removeAll(value);
      }
      return this;
   }
>>

// --------------- Set All ---------------

attrSetAllArray(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(<attr.boxType>... value)
   {
      return this.set<attr.name; format="cap">(Arrays.asList(value));
   }
>>

attrSetAllColl(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(Collection\<? extends <attr.boxType>\> value)
   {
      if (this.<attr.name> == null)
      {
         this.<attr.name> = new <collectionImpl(attr)>(value);
      }
      else
      {
         this.<attr.name>.clear();
         this.<attr.name>.addAll(value);
      }
      return this;
   }
>>
