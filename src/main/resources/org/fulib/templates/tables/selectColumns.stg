selectColumns(className) ::= <<
   public <className>Table selectColumns(String... columnNames)
   {
      Map\<String, Integer> oldColumnMap = new LinkedHashMap\<>(this.columnMap);
      this.columnMap.clear();

      for (int i = 0; i \< columnNames.length; i++)
      {
         String name = columnNames[i];
         if (oldColumnMap.get(name) == null)
         {
            throw new IllegalArgumentException("unknown column name: " + name);
         }
         this.columnMap.put(name, i);
      }

      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();

      Set\<List\<Object>\> rowSet = new HashSet\<>();
      for (List\<Object> row : oldTable)
      {
         List\<Object> newRow = new ArrayList\<>();
         for (String name : columnNames)
         {
            Object value = row.get(oldColumnMap.get(name));
            newRow.add(value);
         }
         if (rowSet.add(newRow))
         {
            this.table.add(newRow);
         }
      }

      return this;
   }
>>

dropColumns(className) ::= <<
   public <className>Table dropColumns(String... columnNames)
   {
      Map\<String, Integer> oldColumnMap = new LinkedHashMap\<>(this.columnMap);
      this.columnMap.clear();

      Set\<String> dropNames = new HashSet\<>(Arrays.asList(columnNames));
      int i = 0;
      for (String name : oldColumnMap.keySet())
      {
         if (!dropNames.contains(name))
         {
            this.columnMap.put(name, i);
            i++;
         }
      }

      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();

      Set\<List\<Object>\> rowSet = new HashSet\<>();
      for (List\<Object> row : oldTable)
      {
         List\<Object> newRow = new ArrayList\<>();
         for (String name : this.columnMap.keySet())
         {
            Object value = row.get(oldColumnMap.get(name));
            newRow.add(value);
         }
         if (rowSet.add(newRow))
         {
            this.table.add(newRow);
         }
      }

      return this;
   }
>>

addColumn(className) ::= <<
   public void addColumn(String columnName, Function\<? super Map\<String, Object>, ?> function)
   {
      int newColumnNumber = this.table.isEmpty() ? 0 : this.table.get(0).size();
      for (List\<Object> row : this.table)
      {
         Map\<String, Object> map = new LinkedHashMap\<>();
         for (Map.Entry\<String, Integer> entry : this.columnMap.entrySet())
         {
            map.put(entry.getKey(), row.get(entry.getValue()));
         }
         Object result = function.apply(map);
         row.add(result);
      }
      this.columnMap.put(columnName, newColumnNumber);
   }
>>
