tableRoleSignatures(role, other) ::= <<
   expandMethod:  method:expand<role.name; format="cap">(String...)
   hasMethod:     method:has<role.name; format="cap">(<other.clazz.name>Table)
>>

expandMethod(role, other) ::= <<
   public <other.clazz.name>Table expand<role.name; format="cap">(String... rowName)
   {
      <other.clazz.name>Table result = new <other.clazz.name>Table();
      result.setColumnMap(this.columnMap);
      result.setTable(this.table);
      int newColumnNumber = this.table.isEmpty() ? 0 : this.table.get(0).size();

      String newColumnName = rowName != null && rowName.length > 0 ? rowName[0] : "" + ((char)('A' + newColumnNumber));
      result.setColumnName(newColumnName);
      this.columnMap.put(newColumnName, newColumnNumber);

      int column = this.getColumn();
      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();
      for (List\<Object> row : oldTable)
      {
         <role.clazz.name> start = (<role.clazz.name>) row.get(column);
         <if(role.toMany)>
         for (<other.clazz.name> current : start.get<role.name; format="cap">())
         {
            List\<Object> newRow = new ArrayList\<>(row);
            newRow.add(current);
            this.table.add(newRow);
         }
         <else>
         List\<Object> newRow = new ArrayList\<>(row);
         newRow.add(start.get<role.name; format="cap">());
         this.table.add(newRow);
         <endif>
      }
      return result;
   }
>>

hasMethod(role, other) ::= <<
   public <role.clazz.name>Table has<role.name; format="cap">(<other.clazz.name>Table rowName)
   {
      int column = this.getColumn();
      int otherColumn = this.columnMap.get(rowName.getColumnName());
      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();
      for (List\<Object> row : oldTable)
      {
         <role.clazz.name> start = (<role.clazz.name>) row.get(column);
         <other.clazz.name> other = (<other.clazz.name>) row.get(otherColumn);
         <if(role.toMany)>
         if (start.get<role.name; format="cap">().contains(other))
         <else>
         if (start.get<role.name; format="cap">() == other)
         <endif>
         {
            this.table.add(row);
         }
      }
      return this;
   }
>>
