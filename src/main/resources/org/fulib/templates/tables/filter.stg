filter(className) ::= <<
   public <className>Table filter(Predicate\<? super <className>\> predicate)
   {
      int column = this.getColumn();
      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();
      for (List\<Object> row : oldTable)
      {
         <className> start = (<className>) row.get(column);
         if (predicate.test(start))
         {
            this.table.add(row);
         }
      }
      return this;
   }
>>

filterRow(className) ::= <<
   public <className>Table filterRow(Predicate\<? super Map\<String, Object>\> predicate)
   {
      List\<List\<Object>\> oldTable = new ArrayList\<>(this.table);
      this.table.clear();
      for (List\<Object> row : oldTable)
      {
         Map\<String, Object> map = new LinkedHashMap\<>();
         for (Map.Entry\<String, Integer> entry : this.columnMap.entrySet())
         {
            map.put(entry.getKey(), row.get(entry.getValue()));
         }
         if (predicate.test(map))
         {
            this.table.add(row);
         }
      }
      return this;
   }
>>
