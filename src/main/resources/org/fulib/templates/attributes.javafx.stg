import "attributes.pojo.stg"

propertyType(attr) ::= <%
<if(attr.collection)>
   ListProperty\<<attr.boxType>>
<elseif(attr.primitive)>
   <attr.boxType>Property
<else>
   ObjectProperty\<<attr.type>>
<endif>
%>

attrDecl(attr) ::= <<
   private <propertyType(attr)> <attr.name> = _init<attr.name; format="cap">();
>>

initMethod(attr) ::= <<
   private <propertyType(attr)> _init<attr.name; format="cap">()
   {
      final <propertyType(attr)> result = new Simple<propertyType(attr)>(<if(attr.collection)>javafx.collections.FXCollections.observableArrayList()<endif>);
      result.addListener((observable, oldValue, newValue) -> this.firePropertyChange(PROPERTY_<attr.name>, oldValue, newValue));
      return result;
   }
>>

attrGet(attr) ::= <<
<if(attr.collection)>
   public java.util.List\<<attr.boxType>\> get<attr.name; format="cap">()
<else>
   public <attr.type> get<attr.name; format="cap">()
<endif>
   {
      return this.<attr.name>.getValue();
   }
>>

attrSet(attr) ::= <<
   public <attr.clazz.name> set<attr.name; format="cap">(<attr.type> value)
   {
      if (<if(attr.primitive)>value != this.<attr.name>.getValue()<else>!Objects.equals(value, this.<attr.name>.getValue())<endif>)
      {
         this.<attr.name>.setValue(value);
      }
      return this;
   }
>>

propertyGet(attr) ::= <<
   public <propertyType(attr)> <attr.name>Property()
   {
      return this.<attr.name>;
   }
>>

attrWithItem(attr) ::= <<
   public <attr.clazz.name> with<attr.name; format="cap">(<attr.boxType> value)
   {
      this.<attr.name>.add(value);
      return this;
   }
>>

attrWithoutItem(attr) ::= <<
   public <attr.clazz.name> without<attr.name; format="cap">(<attr.boxType> value)
   {
      this.<attr.name>.removeAll(value);
      return this;
   }
>>
