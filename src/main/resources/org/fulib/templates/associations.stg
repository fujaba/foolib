emptySetDecl(roleName, otherClassName, roleType) ::= <<
   public static final <roleType> EMPTY_<roleName> = new <roleType>()
   { @Override public boolean add(<otherClassName> value){ throw new UnsupportedOperationException("No direct add! Use xy.with<roleName; format="cap">(obj)"); }};
>>


roleAttrDecl(roleName, roleType, toMany, otherClassName) ::= <<
   private <roleType> <roleName> = null;
>>

propertyDecl(roleName) ::= <<
   public static final String PROPERTY_<roleName> = "<roleName>";
>>

getMethod(roleName, toMany, otherClassName, roleType) ::= <<
   public <roleType> get<roleName; format="cap">()
   {
      <if(toMany)>
      return this.<roleName> != null ? this.<roleName> : EMPTY_<roleName>;
      <else>
      return this.<roleName>;
      <endif>
   }
>>

setMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany, roleType) ::= <<
<if(toMany)>
   public <myClassName> with<roleName; format="cap">(Object... value)
   {
      if (value == null)
      {
         return this;
      }
      for (Object item : value)
      {
         if (item == null)
         {
            continue;
         }
         if (item instanceof Collection)
         {
            this.with<roleName; format="cap">(((Collection\<?>) item).toArray());
         }
         else if (item instanceof <otherClassName>)
         {
            if (this.<roleName> == null)
            {
               this.<roleName> = new <roleType>();
            }
            if (!this.<roleName>.contains(item))
            {
               this.<roleName>.add((<otherClassName>)item);
<if(otherRoleName)>
               ((<otherClassName>)item).<prefix(otherToMany)><otherRoleName; format="cap">(this);
<endif>
               this.firePropertyChange("<roleName>", null, item);
            }
         }
         else
         {
            throw new IllegalArgumentException();
         }
      }
      return this;
   }
<else>
   public <myClassName> set<roleName; format="cap">(<otherClassName> value)
   {
      if (this.<roleName> == value)
      {
         return this;
      }

      final <otherClassName> oldValue = this.<roleName>;
<if(otherRoleName)>
      if (this.<roleName> != null)
      {
         this.<roleName> = null;
         oldValue.<withoutThis(otherToMany, otherRoleName)>;
      }
<endif>
      this.<roleName> = value;
<if(otherRoleName)>
      if (value != null)
      {
         value.<prefix(otherToMany)><otherRoleName; format="cap">(this);
      }
<endif>
      this.firePropertyChange("<roleName>", oldValue, value);
      return this;
   }
<endif>
>>

withoutMethod(roleName, toMany, myClassName, otherClassName, otherRoleName, otherToMany, roleType) ::= <<
   public <myClassName> without<roleName; format="cap">(Object... value)
   {
      if (this.<roleName> == null || value == null)
      {
         return this;
      }
      for (Object item : value)
      {
         if (item == null)
         {
            continue;
         }
         if (item instanceof Collection)
         {
            this.without<roleName; format="cap">(((Collection\<?>) item).toArray());
         }
         else if (item instanceof <otherClassName>)
         {
            if (this.<roleName>.remove(item))
            {
<if(otherRoleName)>
               ((<otherClassName>)item).<withoutThis(otherToMany, otherRoleName)>;
<endif>
               this.firePropertyChange("<roleName>", item, null);
            }
         }
      }
      return this;
   }
>>

withoutItem(roleName, myClassName, otherClassName, otherRoleName, otherToMany) ::= <<
   public <myClassName> without<roleName; format="cap">(<otherClassName> value)
   {
      if (this.<roleName>.remove(item))
      {
<if(otherRoleName)>
         ((<otherClassName>) item).<withoutThis(otherToMany, otherRoleName)>;
<endif>
         this.firePropertyChange("<roleName>", item, null);
      }
      return this;
   }
>>

withoutArray(roleName, myClassName, otherClassName) ::= <<
   public <myClassName> without<roleName; format="cap">(<otherClassName>... value)
   {
      for (final <otherClassName> item : value)
      {
         this.without<roleName; format="cap">(item);
      }
      return this;
   }
>>

withoutColl(roleName, myClassName, otherClassName) ::= <<
   public <myClassName> without<roleName; format="cap">(Collection\<? extends <otherClassName>\> value)
   {
      for (final <otherClassName> item : value)
      {
         this.without<roleName; format="cap">(item);
      }
      return this;
   }
>>

withoutThis(toMany, otherRoleName) ::= <%
<if(toMany)>
   without<otherRoleName; format="cap">(this)
<else>
   set<otherRoleName; format="cap">(null)
<endif>
%>

prefix(toMany) ::= <%
<if(toMany)>
   with
<else>
   set
<endif>
%>
