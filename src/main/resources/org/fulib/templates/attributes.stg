
attrDecl(type, name, value) ::=
<<   private <type> <name><init(value)>;>>


init(v) ::= "<if(v)> = <v><endif>"


propertyDecl(name) ::=
<<   public static final String PROPERTY_<name> = "<name>";>>


attrGet(name, type) ::= <<
   public <type> get<name; format="cap">()
   {
      return <name>;
   }
>>


attrSet(class, name, type, useEquals) ::=
<<
   public <class> set<name; format="cap">(<type> value)
   {
      if (<condition(name, type, useEquals)>)
      {
         <type> oldValue = this.<name>;
         this.<name> = value;
         firePropertyChange("<name>", oldValue, value);
      }
      return this;
   }
>>

attrWith(class, name, listType, baseType) ::=
<<
   public <class> with<name; format="cap">(Object... value)
   {
      if(value==null) return this;
      for (Object item : value)
      {
         if (item == null) continue;
         if (item instanceof java.util.Collection)
         {
            for (Object i : (java.util.Collection) item)
            {
               this.with<name; format="cap">(i);
            }
         }
         else if (item instanceof <baseType>)
         {
            if (this.<name> == null)
            {
               this.<name> = new <listType>();
            }
            this.resultList.add((<baseType>) item);
            firePropertyChange("<name>", null, item);
         }
         else throw new IllegalArgumentException();
      }
      return this;
   }
>>


attrWithout(class, name, listType, baseType) ::=
<<
   public <class> without<name; format="cap">(Object... value)
   {
      if (this.<name> == null || value==null) return this;
      for (Object item : value)
      {
         if (item == null) continue;
         if (item instanceof java.util.Collection)
         {
            for (Object i : (java.util.Collection) item)
            {
               this.without<name; format="cap">(i);
            }
         }
         else if (item instanceof <baseType>)
         {
            if (this.resultList.contains(item))
            {
               this.resultList.remove((<baseType>) item);
               firePropertyChange("<name>", item, null);
            }
         }
      }
      return this;
   }
>>


simpleAttrSet(class, name, type) ::=
<<
   public <class> set<name; format="cap">(<type> value)
   {
      this.<name> = value;
      return this;
   }
>>



condition(name, type, useEquals) ::=
<%
<if(useEquals)>value == null ? this.<name> != null : ! value.equals(this.<name>)
<else>
value != this.<name>
<endif>
%>
