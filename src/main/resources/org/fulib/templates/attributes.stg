// --------------- Declarations ---------------

attrDecl(type, name, value) ::= <<
   private <type> <name><if(value)> = <value><endif>;
>>

propertyDecl(name) ::= <<
   public static final String PROPERTY_<name> = "<name>";
>>

// --------------- Simple Accessors ---------------

attrGet(name, type) ::= <<
   public <type> get<name; format="cap">()
   {
      return this.<name>;
   }
>>

attrSet(class, name, type, useEquals) ::= <<
   public <class> set<name; format="cap">(<type> value)
   {
      if (<if(useEquals)>Objects.equals(value, this.<name>)<else>value == this.<name><endif>)
      {
         return this;
      }

      final <type> oldValue = this.<name>;
      this.<name> = value;
      this.firePropertyChange("<name>", oldValue, value);
      return this;
   }
>>

simpleAttrSet(class, name, type) ::= <<
   public <class> set<name; format="cap">(<type> value)
   {
      this.<name> = value;
      return this;
   }
>>

// --------------- With ---------------

attrWithItem(class, name, listType, baseType) ::= <<
   public <class> with<name; format="cap">(<baseType> value)
   {
      if (this.<name> == null)
      {
         this.<name> = new <listType>();
      }
      if (this.<name>.add((<baseType>) item))<! the collection could be a set, in which case we don't want a PCE!>
      {
         this.firePropertyChange("<name>", null, item);
      }
      return this;
   }
>>

attrWithArray(class, name, baseType) ::= <<
   public <class> with<name; format="cap">(<baseType>... value)
   {
      for (final <baseType> item : value)
      {
         this.with<name; format="cap">(item);
      }
      return this;
   }
>>

attrWithColl(class, name, baseType) ::= <<
   public <class> with<name; format="cap">(Collection\<? extends <baseType>\> value)
   {
      for (final <baseType> item : value)
      {
         this.with<name; format="cap">(item);
      }
      return this;
   }
>>

// --------------- Without ---------------

attrWithoutItem(class, name, baseType) ::= <<
   public <class> without<name; format="cap">(<baseType> value)
   {
      if (this.<name> != null && this.<name>.remove(item))
      {
         this.firePropertyChange("<name>", item, null);
      }
      return this;
   }
>>

attrWithoutArray(class, name, baseType) ::= <<
   public <class> without<name; format="cap">(<baseType>... value)
   {
      for (final <baseType> item : value)
      {
         this.without<name; format="cap">(item);
      }
      return this;
   }
>>

attrWithoutColl(class, name, baseType) ::= <<
   public <class> without<name; format="cap">(Collection\<? extends <baseType>\> value)
   {
      for (final <baseType> item : value)
      {
         this.with<name; format="cap">(item);
      }
      return this;
   }
>>

// --------------- Set All ---------------

attrSetAllArray(class, name, listType, baseType) ::= <<
   public <class> set<name; format="cap">(<baseType>... value)
   {
      return this.set<name; format="cap">(Arrays.asList(value));
   }
>>

attrSetAllColl(class, name, listType, baseType) ::= <<
   public <class> set<name; format="cap">(Collection\<? extends <baseType>\> value)
   {
      if (value == null)
      {
         if (this.<name> != null)
         {
            for (final <baseType> oldItem : this.<name>)
            {
               this.firePropertyChange(PROPERTY_<name>, oldItem, null);
            }
         }
         this.<name> = null;
         return this;
      }

      if (this.<name> == null)
      {
         this.<name> = new <listType>\<>(value);
         for (final <baseType> newItem : value)
         {
            this.firePropertyChange(PROPERTY_<name>, null, newItem);
         }
         return this;
      }

      if (value.equals(this.<name>))
      {
         return this;
      }

      for (final <baseType> oldItem : this.<name>)
      {
         if (!value.contains(oldItem))
         {
            this.firePropertyChange(PROPERTY_methods, oldItem, null);
         }
      }

      for (final <baseType> newItem : value)
      {
         if (!this.<name>.contains(newItem))
         {
            this.firePropertyChange(PROPERTY_<name>, null, newItem);
         }
      }

      this.<name>.clear();
      this.<name>.addAll(value);
      return this;
   }
>>
